name: Build and deploy Java and Angular application to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  S3_BUCKET_NAME: your-s3-bucket-name
  AWS_ECS_CLUSTER_NAME: your-ecs-cluster-name
  AWS_ECS_SERVICE_NAME: your-ecs-service-name
  AWS_ECR_REPOSITORY_NAME: your-ecr-repository-name

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 3306:3306
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Build and test the Java backend
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build and test Java backend
        run: |
          cd backend
          ./gradlew build

      # Generate test coverage report
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./backend/build/reports/jacoco/test/jacocoTestReport.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      # Build and test the Angular frontend
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies and run tests
        run: |
          cd frontend
          npm install
          npm run test -- --watch=false --code-coverage

      # Upload Angular coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      # Build Docker image and push to AWS ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: $
